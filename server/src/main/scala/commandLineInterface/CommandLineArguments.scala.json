[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Wouldn't it be less code and at the same time better type safety to have:\r\n\r\n```\r\nclass GithubSubcommand extends Subcommand(\"github\") {\r\n  val searchScopeBegin: ScallopOption[Int]  =\r\n    opt[Int](\"beginPRNumber\", 'b', \"PR number from which program starts crawling. If not specified, set to last PR number detected in output repository\", required = false)\r\n  val searchScopeEnd: ScallopOption[Int]    =\r\n    opt[Int](\"endPRNumber\", 'e',\"PR number to which program end crawling. If not specified end is last PR number in repository\", required = false)\r\n  val githubToken: ScallopOption[String] =\r\n    trailArg[String](\"token\", \"bearer token to access github.com\", required = true)\r\n  val inputRepository: ScallopOption[String] = \r\n    trailArg[String](\"input repository URL\", \"URL to input repository\", required = true)\r\n  val outputRepository: ScallopOption[String] = \r\n    trailArg[String](\"output repository URL\", \"URL to output directory\", required = true)\r\n  val outputRepositoryBranch: ScallopOption[String] = \r\n    trailArg[String](\"branch name\", \"branch on which files should be stored\", required = false)\r\n}\r\n\r\nclass CommandLineArguments(arguments: Seq[String]) extends ScallopConf(arguments) {\r\n  val github: GithubSubcommand = new GithubSubcommand()\r\n  addSubcommand(github)\r\n  verify()\r\n}\r\n```\r\n\r\n?",
        "createdAt" : "2020-03-17T09:27:33Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,32 @@\n+package commandLineInterface\n+\n+import commandLineInterface.CommandLineArguments.GithubSubcommand\n+import org.rogach.scallop.{ScallopConf, ScallopOption, Subcommand}\n+\n+class CommandLineArguments(arguments: Seq[String]) extends ScallopConf(arguments) {\n+  val github: GithubSubcommand = new Subcommand(\"github\") {\n+    val searchScopeBegin: ScallopOption[Int]  =\n+      opt[Int](\"beginPRNumber\", 'b', \"PR number from which program starts crawling. If not specified, set to last PR number detected in output repository\", required = false)\n+    val searchScopeEnd: ScallopOption[Int]    =\n+      opt[Int](\"endPRNumber\", 'e',\"PR number to which program end crawling. If not specified end is last PR number in repository\", required = false)\n+    val githubToken: ScallopOption[String] =\n+      trailArg[String](\"token\", \"bearer token to access github.com\", required = true)\n+    val inputRepository = trailArg[String](\"input repository URL\", \"URL to input repository\", required = true)\n+    val outputRepository = trailArg[String](\"output repository URL\", \"URL to output directory\", required = true)\n+    val outputRepositoryBranch = trailArg[String](\"branch name\", \"branch on which files should be stored\", required = false)\n+  }\n+  addSubcommand(github)\n+\n+  verify()\n+}\n+\n+object CommandLineArguments {\n+  type GithubSubcommand = Subcommand {"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "It is better indeed. Changed.",
        "createdAt" : "2020-03-18T07:54:16Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,32 @@\n+package commandLineInterface\n+\n+import commandLineInterface.CommandLineArguments.GithubSubcommand\n+import org.rogach.scallop.{ScallopConf, ScallopOption, Subcommand}\n+\n+class CommandLineArguments(arguments: Seq[String]) extends ScallopConf(arguments) {\n+  val github: GithubSubcommand = new Subcommand(\"github\") {\n+    val searchScopeBegin: ScallopOption[Int]  =\n+      opt[Int](\"beginPRNumber\", 'b', \"PR number from which program starts crawling. If not specified, set to last PR number detected in output repository\", required = false)\n+    val searchScopeEnd: ScallopOption[Int]    =\n+      opt[Int](\"endPRNumber\", 'e',\"PR number to which program end crawling. If not specified end is last PR number in repository\", required = false)\n+    val githubToken: ScallopOption[String] =\n+      trailArg[String](\"token\", \"bearer token to access github.com\", required = true)\n+    val inputRepository = trailArg[String](\"input repository URL\", \"URL to input repository\", required = true)\n+    val outputRepository = trailArg[String](\"output repository URL\", \"URL to output directory\", required = true)\n+    val outputRepositoryBranch = trailArg[String](\"branch name\", \"branch on which files should be stored\", required = false)\n+  }\n+  addSubcommand(github)\n+\n+  verify()\n+}\n+\n+object CommandLineArguments {\n+  type GithubSubcommand = Subcommand {"
      }
    ]
  }
]