[
  {
    "prId" : 21,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : ")`match` on None doesn't have sense ;)\r\nIt could be replaced with series of ifs.",
        "createdAt" : "2020-03-19T18:15:32Z",
        "updatedAt" : null,
        "commit" : "0dd48df049aa17a0d8bc656897285fb59c391224",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,39 @@\n+package lsp\n+\n+import lsp.api._\n+import lsp.launcher.compat.scala.ScalaRcpMethodsResolver\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+case class CodetaleLanguageServer()(\n+    implicit val executionContext: ExecutionContext\n+) extends ConnectionApi\n+    with DocumentApi\n+    with WorkspaceApi\n+    with CodetaleExtApi\n+    with ScalaRcpMethodsResolver {\n+\n+  protected var client: CodetaleLanguageClient = _\n+\n+  def connectWithClient(client: CodetaleLanguageClient): CodetaleLanguageServer = {\n+    this.client = client\n+    this\n+  }\n+\n+  /**\n+    * Validations to be performed on received request\n+    */\n+  def serverStateValidations[T](passed: => Future[T]): Future[T] = {\n+    def failWith(exception: Exception): Future[T] = {\n+      passed.cancel(true)\n+      Future.failed(exception)\n+    }\n+\n+    None match {"
      },
      {
        "author" : {
          "login" : "WojciechMazur",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "This fragment of code is already gone, although in mind of this structure was make it more readable in case of many conditions, even if this may have no sense",
        "createdAt" : "2020-03-19T18:32:23Z",
        "updatedAt" : null,
        "commit" : "0dd48df049aa17a0d8bc656897285fb59c391224",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,39 @@\n+package lsp\n+\n+import lsp.api._\n+import lsp.launcher.compat.scala.ScalaRcpMethodsResolver\n+\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+case class CodetaleLanguageServer()(\n+    implicit val executionContext: ExecutionContext\n+) extends ConnectionApi\n+    with DocumentApi\n+    with WorkspaceApi\n+    with CodetaleExtApi\n+    with ScalaRcpMethodsResolver {\n+\n+  protected var client: CodetaleLanguageClient = _\n+\n+  def connectWithClient(client: CodetaleLanguageClient): CodetaleLanguageServer = {\n+    this.client = client\n+    this\n+  }\n+\n+  /**\n+    * Validations to be performed on received request\n+    */\n+  def serverStateValidations[T](passed: => Future[T]): Future[T] = {\n+    def failWith(exception: Exception): Future[T] = {\n+      passed.cancel(true)\n+      Future.failed(exception)\n+    }\n+\n+    None match {"
      }
    ]
  }
]