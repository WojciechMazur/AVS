[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Make methods unaccesible outside of the class `private`",
        "createdAt" : "2020-03-10T10:34:23Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,51 @@\n+package github.web\n+\n+import java.nio.file.Path\n+\n+import com.typesafe.config.ConfigFactory\n+import scalaj.http.HttpRequest\n+import github.utils._\n+import utils.FilesOperations._\n+\n+case class Crawler(scope: SearchScope, credentials: Credentials, repository: Repository) {\n+  def downloadPullRequests(): List[(PRId, GithubResponse)] = {\n+    scope.values.map(prId => (PRId(prId), downloadPullRequest(PRId(prId)))).toList\n+  }\n+\n+  def downloadPullRequest(pullRequestNumber: PRId): GithubResponse = {"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "This looks very similar to `CrawlToStandardModel`. It should be part of the one, main app. \r\nIf you think option of downloading raw jsons might be usefull for us, just burry it under program option.",
        "createdAt" : "2020-03-10T10:36:51Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,51 @@\n+package github.web\n+\n+import java.nio.file.Path\n+\n+import com.typesafe.config.ConfigFactory\n+import scalaj.http.HttpRequest\n+import github.utils._\n+import utils.FilesOperations._\n+\n+case class Crawler(scope: SearchScope, credentials: Credentials, repository: Repository) {\n+  def downloadPullRequests(): List[(PRId, GithubResponse)] = {\n+    scope.values.map(prId => (PRId(prId), downloadPullRequest(PRId(prId)))).toList\n+  }\n+\n+  def downloadPullRequest(pullRequestNumber: PRId): GithubResponse = {\n+    val request = prepareRequest(pullRequestNumber)\n+    val response = sendRequest(request)\n+    response\n+  }\n+\n+  def prepareRequest(pullRequestNumber: PRId): HttpRequest = {\n+    val authorisationHeader = credentials.generateHeader()\n+    val query = QueryGenerator.queryForPullRequestWithNumber(pullRequestNumber, repository)\n+    val request = GithubRequestGenerator.createRequest(authorisationHeader, query)\n+    request\n+  }\n+\n+  def sendRequest(request: HttpRequest): GithubResponse = {\n+    request.asString.body\n+  }\n+}\n+\n+object Crawler {"
      }
    ]
  }
]