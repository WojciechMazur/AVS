[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "You do need that.\r\nWe have the same classes in github model already (plus some additional optional fields, which is fine - they will be None in this case).",
        "createdAt" : "2020-03-17T09:40:38Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,52 @@\n+package github\n+\n+import github.web.{Credentials, GithubRepository, GithubRequestGenerator}\n+import spray.json._\n+\n+object LatestPullRequestNumberGetter {\n+  def get(repository: GithubRepository, credentials: Option[Credentials]): Int = {\n+    import QueryJsonModel.Data\n+    import QueryJsonModel.QueryJsonProtocol.dataJson\n+    val response = sendRequest(repository, credentials)\n+    val jsonAST = response.parseJson\n+    val number = jsonAST.convertTo[Data](dataJson).repository.pullRequest.nodes.head.number\n+    number\n+  }\n+\n+  private def sendRequest(repository: GithubRepository, credentials: Option[Credentials]): String = {\n+    val query = getQuery(repository)\n+    val request = GithubRequestGenerator.createRequest(query, credentials)\n+    request.asString.body\n+  }\n+\n+  private def getQuery(repository: GithubRepository): github.utils.Query = {\n+    val query = s\"\"\"query {\n+      repository(owner: \\\\\\\"${repository.owner}\\\\\\\", name: \\\\\\\"${repository.name}\\\\\\\") {\n+        pullRequest: pullRequests(last: 1) {\n+          nodes {\n+            ... on PullRequest {\n+              number\n+            }\n+          }\n+        }\n+      }\n+    }\"\"\"\n+    github.utils.Query(query)\n+  }\n+\n+  private object QueryJsonModel {"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Ok, I will get it back",
        "createdAt" : "2020-03-17T12:25:37Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,52 @@\n+package github\n+\n+import github.web.{Credentials, GithubRepository, GithubRequestGenerator}\n+import spray.json._\n+\n+object LatestPullRequestNumberGetter {\n+  def get(repository: GithubRepository, credentials: Option[Credentials]): Int = {\n+    import QueryJsonModel.Data\n+    import QueryJsonModel.QueryJsonProtocol.dataJson\n+    val response = sendRequest(repository, credentials)\n+    val jsonAST = response.parseJson\n+    val number = jsonAST.convertTo[Data](dataJson).repository.pullRequest.nodes.head.number\n+    number\n+  }\n+\n+  private def sendRequest(repository: GithubRepository, credentials: Option[Credentials]): String = {\n+    val query = getQuery(repository)\n+    val request = GithubRequestGenerator.createRequest(query, credentials)\n+    request.asString.body\n+  }\n+\n+  private def getQuery(repository: GithubRepository): github.utils.Query = {\n+    val query = s\"\"\"query {\n+      repository(owner: \\\\\\\"${repository.owner}\\\\\\\", name: \\\\\\\"${repository.name}\\\\\\\") {\n+        pullRequest: pullRequests(last: 1) {\n+          nodes {\n+            ... on PullRequest {\n+              number\n+            }\n+          }\n+        }\n+      }\n+    }\"\"\"\n+    github.utils.Query(query)\n+  }\n+\n+  private object QueryJsonModel {"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Finally, it turns out that these models have no much in common as it seems to be. Names are similar, but underlying objects from Github vary from each other",
        "createdAt" : "2020-03-17T15:39:57Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,52 @@\n+package github\n+\n+import github.web.{Credentials, GithubRepository, GithubRequestGenerator}\n+import spray.json._\n+\n+object LatestPullRequestNumberGetter {\n+  def get(repository: GithubRepository, credentials: Option[Credentials]): Int = {\n+    import QueryJsonModel.Data\n+    import QueryJsonModel.QueryJsonProtocol.dataJson\n+    val response = sendRequest(repository, credentials)\n+    val jsonAST = response.parseJson\n+    val number = jsonAST.convertTo[Data](dataJson).repository.pullRequest.nodes.head.number\n+    number\n+  }\n+\n+  private def sendRequest(repository: GithubRepository, credentials: Option[Credentials]): String = {\n+    val query = getQuery(repository)\n+    val request = GithubRequestGenerator.createRequest(query, credentials)\n+    request.asString.body\n+  }\n+\n+  private def getQuery(repository: GithubRepository): github.utils.Query = {\n+    val query = s\"\"\"query {\n+      repository(owner: \\\\\\\"${repository.owner}\\\\\\\", name: \\\\\\\"${repository.name}\\\\\\\") {\n+        pullRequest: pullRequests(last: 1) {\n+          nodes {\n+            ... on PullRequest {\n+              number\n+            }\n+          }\n+        }\n+      }\n+    }\"\"\"\n+    github.utils.Query(query)\n+  }\n+\n+  private object QueryJsonModel {"
      }
    ]
  },
  {
    "prId" : 24,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Cannot we just get a number directly as that is all we need?",
        "createdAt" : "2020-03-23T10:56:12Z",
        "updatedAt" : null,
        "commit" : "ba59af1dcdd25012d04db1a873565f066247d6d5",
        "line" : 30,
        "diffHunk" : "@@ -1,25 +1,32 @@\n package github\n \n-import github.model.GithubJsonProtocol._\n import github.model._\n import github.utils.GithubQuery\n-import github.web.{Credentials, GithubRepository, GithubRequestGenerator}\n-import spray.json._\n+import github.web.{ Credentials, GithubRepository, GithubRequestGenerator }\n+import io.circe.parser._\n \n object LatestPullRequestNumberGetter {\n   def get(repository: GithubRepository, credentials: Option[Credentials]): Int = {\n     val response = sendRequest(repository, credentials)\n-    val jsonAST = response.parseJson\n-    val PRs = jsonAST.asJsObject.fields(\"data\")\n-      .asJsObject.fields(\"repository\")\n-      .asJsObject.fields(\"pullRequests\")\n-      .asJsObject.fields(\"nodes\")\n-      .convertTo[List[PullRequest]]\n-    PRs.head.number.get\n+    parse(response)\n+      .flatMap(\n+        _.hcursor\n+          .downField(\"data\")\n+          .downField(\"repository\")\n+          .downField(\"pullRequests\")\n+          .downField(\"nodes\")\n+          .downArray\n+          .as[PullRequest]\n+          .map(_.number)"
      },
      {
        "author" : {
          "login" : "WojciechMazur",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Sure, why not. I'll change it. ",
        "createdAt" : "2020-03-23T11:06:13Z",
        "updatedAt" : null,
        "commit" : "ba59af1dcdd25012d04db1a873565f066247d6d5",
        "line" : 30,
        "diffHunk" : "@@ -1,25 +1,32 @@\n package github\n \n-import github.model.GithubJsonProtocol._\n import github.model._\n import github.utils.GithubQuery\n-import github.web.{Credentials, GithubRepository, GithubRequestGenerator}\n-import spray.json._\n+import github.web.{ Credentials, GithubRepository, GithubRequestGenerator }\n+import io.circe.parser._\n \n object LatestPullRequestNumberGetter {\n   def get(repository: GithubRepository, credentials: Option[Credentials]): Int = {\n     val response = sendRequest(repository, credentials)\n-    val jsonAST = response.parseJson\n-    val PRs = jsonAST.asJsObject.fields(\"data\")\n-      .asJsObject.fields(\"repository\")\n-      .asJsObject.fields(\"pullRequests\")\n-      .asJsObject.fields(\"nodes\")\n-      .convertTo[List[PullRequest]]\n-    PRs.head.number.get\n+    parse(response)\n+      .flatMap(\n+        _.hcursor\n+          .downField(\"data\")\n+          .downField(\"repository\")\n+          .downField(\"pullRequests\")\n+          .downField(\"nodes\")\n+          .downArray\n+          .as[PullRequest]\n+          .map(_.number)"
      }
    ]
  }
]