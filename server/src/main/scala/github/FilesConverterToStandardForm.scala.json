[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "We should just have one app doing everything (so only one `main`)",
        "createdAt" : "2020-03-10T10:33:27Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,59 @@\n+package github\n+\n+import java.nio.file.{Files, Path}\n+import java.util.stream.Collectors\n+\n+import com.typesafe.config.ConfigFactory\n+\n+import scala.jdk.CollectionConverters._\n+import github.utils._\n+import standard.model.File\n+import standard.utils.FilesOperations\n+\n+object FilesConverterToStandardForm {"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "It could make sense to put that 3 lines in `FilesOperations`",
        "createdAt" : "2020-03-13T12:23:12Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,46 @@\n+package github\n+\n+import java.nio.file.{Files, Path}\n+import java.util.stream.Collectors\n+\n+import scala.jdk.CollectionConverters._\n+import github.utils._\n+import standard.model.DiscussionFile\n+import standard.utils.FilesOperations\n+\n+object FilesConverterToStandardForm {\n+\n+  def processFilesInDirectory(pathToInputDirectory: Path, pathToOutputDirectory: Path): Unit = {\n+    val discussions = loadFilesFromDirectory(pathToInputDirectory)\n+    FilesOperations.saveAllDiscussions(pathToOutputDirectory, discussions)\n+  }\n+\n+  def loadFilesFromDirectory(pathToInputDirectory: Path): List[DiscussionFile] = {\n+    if (Files.exists(pathToInputDirectory) && Files.isDirectory(pathToInputDirectory))\n+    {\n+      val inputPaths = Files.list(pathToInputDirectory).filter(p => Files.isRegularFile(p))\n+      val files = inputPaths.map[List[DiscussionFile]] {\n+        inputPath =>\n+          try {\n+            loadDiscussions(inputPath)\n+          } catch {\n+            case e: Throwable =>\n+              System.err.println(\"Problem while parsing PR \" + inputPath.getFileName)\n+              System.err.println(e.getMessage)\n+              List()\n+          }\n+      }.collect(Collectors.toList()).asScala.toList.flatten\n+      standard.utils.mergeFiles(files)\n+    } else {\n+      List[DiscussionFile]()\n+    }\n+  }\n+\n+  def loadDiscussions(path: Path): List[DiscussionFile] = {\n+    val source = scala.io.Source.fromFile(path.toFile)"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "To be honest, this file without \"main\" (or connection with it) have no sense",
        "createdAt" : "2020-03-13T12:29:06Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,46 @@\n+package github\n+\n+import java.nio.file.{Files, Path}\n+import java.util.stream.Collectors\n+\n+import scala.jdk.CollectionConverters._\n+import github.utils._\n+import standard.model.DiscussionFile\n+import standard.utils.FilesOperations\n+\n+object FilesConverterToStandardForm {\n+\n+  def processFilesInDirectory(pathToInputDirectory: Path, pathToOutputDirectory: Path): Unit = {\n+    val discussions = loadFilesFromDirectory(pathToInputDirectory)\n+    FilesOperations.saveAllDiscussions(pathToOutputDirectory, discussions)\n+  }\n+\n+  def loadFilesFromDirectory(pathToInputDirectory: Path): List[DiscussionFile] = {\n+    if (Files.exists(pathToInputDirectory) && Files.isDirectory(pathToInputDirectory))\n+    {\n+      val inputPaths = Files.list(pathToInputDirectory).filter(p => Files.isRegularFile(p))\n+      val files = inputPaths.map[List[DiscussionFile]] {\n+        inputPath =>\n+          try {\n+            loadDiscussions(inputPath)\n+          } catch {\n+            case e: Throwable =>\n+              System.err.println(\"Problem while parsing PR \" + inputPath.getFileName)\n+              System.err.println(e.getMessage)\n+              List()\n+          }\n+      }.collect(Collectors.toList()).asScala.toList.flatten\n+      standard.utils.mergeFiles(files)\n+    } else {\n+      List[DiscussionFile]()\n+    }\n+  }\n+\n+  def loadDiscussions(path: Path): List[DiscussionFile] = {\n+    val source = scala.io.Source.fromFile(path.toFile)"
      }
    ]
  }
]