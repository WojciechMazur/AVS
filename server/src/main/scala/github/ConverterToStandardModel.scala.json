[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Could we stick to the convention with `get`? I mean `getPRId`",
        "createdAt" : "2020-03-10T09:49:19Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,70 @@\n+package github\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import spray.json._\n+\n+import github.model._\n+import github.utils.GithubResponse\n+import standard.model.{Discussion, File}\n+\n+object ConverterToStandardModel {\n+  import github.model.GithubJsonProtocol._\n+\n+  def convert(source: GithubResponse): List[File] = {\n+    val jsonAst = source.text.parseJson\n+    val pullRequest = jsonAst.asJsObject.fields(\"data\").convertTo[Data].repository.pullRequest\n+    val prId = digForPRId(pullRequest)\n+    val discussions = for {\n+      reviewThread <- pullRequest.reviewThreads.toList\n+      edges <- reviewThread.edges\n+      comments <- edges.node.comments\n+      path <- comments.nodes.map(_.path).headOption\n+    } yield (path, getStandardDiscussion(prId, comments.nodes))\n+    discussions.groupBy(_._1).\n+      toList.map{case (path, pathWithDiscussion) => File(Path.of(path), pathWithDiscussion.map(_._2))}\n+  }\n+\n+  def digForPRId(pullRequest: PullRequest): Option[Int] = {"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "`File` is a bit confusing if one won't notice package first. Could we change it to something different or more descriptive? Like `DiscussionFile`, `DiscussionStorage`, `JsonFile`... I'm not sure about best name at this point but I will give it a thought.",
        "createdAt" : "2020-03-10T10:16:35Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,70 @@\n+package github\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import spray.json._\n+\n+import github.model._\n+import github.utils.GithubResponse\n+import standard.model.{Discussion, File}\n+\n+object ConverterToStandardModel {\n+  import github.model.GithubJsonProtocol._\n+\n+  def convert(source: GithubResponse): List[File] = {\n+    val jsonAst = source.text.parseJson\n+    val pullRequest = jsonAst.asJsObject.fields(\"data\").convertTo[Data].repository.pullRequest\n+    val prId = digForPRId(pullRequest)\n+    val discussions = for {\n+      reviewThread <- pullRequest.reviewThreads.toList\n+      edges <- reviewThread.edges\n+      comments <- edges.node.comments\n+      path <- comments.nodes.map(_.path).headOption\n+    } yield (path, getStandardDiscussion(prId, comments.nodes))\n+    discussions.groupBy(_._1).\n+      toList.map{case (path, pathWithDiscussion) => File(Path.of(path), pathWithDiscussion.map(_._2))}"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Cannot this potentially go into non tailrec cycle and crash the program?",
        "createdAt" : "2020-03-13T12:15:19Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : 45,
        "diffHunk" : "@@ -0,0 +1,70 @@\n+package github\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import spray.json._\n+\n+import github.model._\n+import github.utils.GithubResponse\n+import standard.model.{Discussion, DiscussionFile}\n+\n+object ConverterToStandardModel {\n+  import github.model.GithubJsonProtocol._\n+\n+  def convert(source: GithubResponse): List[DiscussionFile] = {\n+    val jsonAst = source.text.parseJson\n+    val pullRequest = jsonAst.asJsObject.fields(\"data\").convertTo[Data].repository.pullRequest\n+    val prId = getPRId(pullRequest)\n+    val discussions = for {\n+      reviewThread <- pullRequest.reviewThreads.toList\n+      edges <- reviewThread.edges\n+      comments <- edges.node.comments\n+      path <- comments.nodes.map(_.path).headOption\n+    } yield (path, getStandardDiscussion(prId, comments.nodes))\n+    discussions.groupBy(_._1).\n+      toList.map{case (path, pathWithDiscussion) => DiscussionFile(Path.of(path), pathWithDiscussion.map(_._2))}\n+  }\n+\n+  def getPRId(pullRequest: PullRequest): Option[Int] = {\n+    pullRequest match {\n+      case PullRequest(_, Some(id), _) => Some(id)\n+      case PullRequest(_, None, Some(threads)) =>\n+        val ids = for {\n+          edge <- threads.edges\n+          commentConnection <- edge.node.comments.toList\n+          comment <- commentConnection.nodes\n+          commentPullRequest <- comment.pullRequest\n+          id <- getPRId(commentPullRequest)"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "If structure will be recursive- yes. But it should be tree, without cycles. ",
        "createdAt" : "2020-03-13T12:25:02Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : 45,
        "diffHunk" : "@@ -0,0 +1,70 @@\n+package github\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import spray.json._\n+\n+import github.model._\n+import github.utils.GithubResponse\n+import standard.model.{Discussion, DiscussionFile}\n+\n+object ConverterToStandardModel {\n+  import github.model.GithubJsonProtocol._\n+\n+  def convert(source: GithubResponse): List[DiscussionFile] = {\n+    val jsonAst = source.text.parseJson\n+    val pullRequest = jsonAst.asJsObject.fields(\"data\").convertTo[Data].repository.pullRequest\n+    val prId = getPRId(pullRequest)\n+    val discussions = for {\n+      reviewThread <- pullRequest.reviewThreads.toList\n+      edges <- reviewThread.edges\n+      comments <- edges.node.comments\n+      path <- comments.nodes.map(_.path).headOption\n+    } yield (path, getStandardDiscussion(prId, comments.nodes))\n+    discussions.groupBy(_._1).\n+      toList.map{case (path, pathWithDiscussion) => DiscussionFile(Path.of(path), pathWithDiscussion.map(_._2))}\n+  }\n+\n+  def getPRId(pullRequest: PullRequest): Option[Int] = {\n+    pullRequest match {\n+      case PullRequest(_, Some(id), _) => Some(id)\n+      case PullRequest(_, None, Some(threads)) =>\n+        val ids = for {\n+          edge <- threads.edges\n+          commentConnection <- edge.node.comments.toList\n+          comment <- commentConnection.nodes\n+          commentPullRequest <- comment.pullRequest\n+          id <- getPRId(commentPullRequest)"
      }
    ]
  }
]