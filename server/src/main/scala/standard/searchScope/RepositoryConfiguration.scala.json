[
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "`(_.atKey(\"key\"))`",
        "createdAt" : "2020-03-13T12:49:07Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,53 @@\n+package standard.searchScope\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import java.util.stream.Collectors\n+\n+import com.typesafe.config.{Config, ConfigFactory, ConfigList, ConfigRenderOptions}\n+import common.configuration.ConfigurationFactory\n+import common.configuration.ConfigurationFactory.getDefault\n+\n+import scala.jdk.CollectionConverters._\n+\n+object RepositoryConfiguration {\n+  def getSearchScopes(pathToRepository: Path): List[SearchScope] = {\n+    val configuration = ConfigurationFactory.getConfigurationWithOutputDirectory(pathToRepository)\n+    val lastSearchEndKey = \"repository.searchScopes\"\n+    if(configuration.hasPath(lastSearchEndKey)) {\n+      val searchScopes = configuration.getList(lastSearchEndKey)\n+      toSearchScopesList(searchScopes)\n+    } else {\n+      List()\n+    }\n+  }\n+\n+  def saveSearchScopeInConfiguration(outputDirectory: Path, newSearchScope: SearchScope): Unit = {\n+    val searchScopesNewList = getSearchScopes(outputDirectory).appended(newSearchScope)\n+    val searchScopesAsMap = searchScopesNewList.map(_.toMap().asJava)\n+    val newConfigurationMap =\n+      Map((\"repository.searchScopes\", searchScopesAsMap.asJava)).asJava\n+    val newConfiguration = ConfigFactory.parseMap(newConfigurationMap)\n+    saveConfigurationToFile(newConfiguration, outputDirectory)\n+  }\n+\n+  private def toSearchScopesList(typesafeSearchScopes: ConfigList) = {\n+    val searchScopes = typesafeSearchScopes.stream().map[Config](x => x.atKey(\"key\"))"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "s/x/conf/g",
        "createdAt" : "2020-03-13T12:49:56Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,53 @@\n+package standard.searchScope\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import java.util.stream.Collectors\n+\n+import com.typesafe.config.{Config, ConfigFactory, ConfigList, ConfigRenderOptions}\n+import common.configuration.ConfigurationFactory\n+import common.configuration.ConfigurationFactory.getDefault\n+\n+import scala.jdk.CollectionConverters._\n+\n+object RepositoryConfiguration {\n+  def getSearchScopes(pathToRepository: Path): List[SearchScope] = {\n+    val configuration = ConfigurationFactory.getConfigurationWithOutputDirectory(pathToRepository)\n+    val lastSearchEndKey = \"repository.searchScopes\"\n+    if(configuration.hasPath(lastSearchEndKey)) {\n+      val searchScopes = configuration.getList(lastSearchEndKey)\n+      toSearchScopesList(searchScopes)\n+    } else {\n+      List()\n+    }\n+  }\n+\n+  def saveSearchScopeInConfiguration(outputDirectory: Path, newSearchScope: SearchScope): Unit = {\n+    val searchScopesNewList = getSearchScopes(outputDirectory).appended(newSearchScope)\n+    val searchScopesAsMap = searchScopesNewList.map(_.toMap().asJava)\n+    val newConfigurationMap =\n+      Map((\"repository.searchScopes\", searchScopesAsMap.asJava)).asJava\n+    val newConfiguration = ConfigFactory.parseMap(newConfigurationMap)\n+    saveConfigurationToFile(newConfiguration, outputDirectory)\n+  }\n+\n+  private def toSearchScopesList(typesafeSearchScopes: ConfigList) = {\n+    val searchScopes = typesafeSearchScopes.stream().map[Config](x => x.atKey(\"key\"))\n+      .map(x => {"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "? Sorry but I don't get it",
        "createdAt" : "2020-03-17T07:09:05Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,53 @@\n+package standard.searchScope\n+\n+import java.nio.file.Path\n+import java.time.Instant\n+import java.util.stream.Collectors\n+\n+import com.typesafe.config.{Config, ConfigFactory, ConfigList, ConfigRenderOptions}\n+import common.configuration.ConfigurationFactory\n+import common.configuration.ConfigurationFactory.getDefault\n+\n+import scala.jdk.CollectionConverters._\n+\n+object RepositoryConfiguration {\n+  def getSearchScopes(pathToRepository: Path): List[SearchScope] = {\n+    val configuration = ConfigurationFactory.getConfigurationWithOutputDirectory(pathToRepository)\n+    val lastSearchEndKey = \"repository.searchScopes\"\n+    if(configuration.hasPath(lastSearchEndKey)) {\n+      val searchScopes = configuration.getList(lastSearchEndKey)\n+      toSearchScopesList(searchScopes)\n+    } else {\n+      List()\n+    }\n+  }\n+\n+  def saveSearchScopeInConfiguration(outputDirectory: Path, newSearchScope: SearchScope): Unit = {\n+    val searchScopesNewList = getSearchScopes(outputDirectory).appended(newSearchScope)\n+    val searchScopesAsMap = searchScopesNewList.map(_.toMap().asJava)\n+    val newConfigurationMap =\n+      Map((\"repository.searchScopes\", searchScopesAsMap.asJava)).asJava\n+    val newConfiguration = ConfigFactory.parseMap(newConfigurationMap)\n+    saveConfigurationToFile(newConfiguration, outputDirectory)\n+  }\n+\n+  private def toSearchScopesList(typesafeSearchScopes: ConfigList) = {\n+    val searchScopes = typesafeSearchScopes.stream().map[Config](x => x.atKey(\"key\"))\n+      .map(x => {"
      }
    ]
  },
  {
    "prId" : 13,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Unneded new lines",
        "createdAt" : "2020-03-17T09:44:22Z",
        "updatedAt" : null,
        "commit" : "aa6e686a8328839854467529b25b40ec71f21c0b",
        "line" : 10,
        "diffHunk" : "@@ -0,0 +1,53 @@\n+package standard.searchScope\n+\n+import java.nio.file.Path\n+import java.util.stream.Collectors\n+\n+import com.typesafe.config.{Config, ConfigFactory, ConfigList, ConfigRenderOptions}\n+import common.configuration.ConfigurationFactory\n+import common.configuration.ConfigurationFactory.getDefault\n+\n+import scala.jdk.CollectionConverters._\n+"
      }
    ]
  }
]