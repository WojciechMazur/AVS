[
  {
    "prId" : 14,
    "comments" : [
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "Cannot we just use `Credentials(\"\")`?",
        "createdAt" : "2020-03-19T09:45:26Z",
        "updatedAt" : null,
        "commit" : "ddfd942df8471aa889cc44fe8aacc583404a59b6",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,46 @@\n+package common.git\n+\n+import common.git.RemoteRepositoryAddress._\n+import org.eclipse.jgit.transport.CredentialsProvider\n+import org.scalatest.flatspec.AnyFlatSpec\n+import org.scalatest.matchers.should.Matchers\n+\n+class RemoteRepositoryAddressTest extends AnyFlatSpec with Matchers {\n+  \"CorrectGitURI\" should \"return Right if correct URI applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, None))\n+  }\n+  it should \"return Right if correct URI and branch applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, Some(\"master\")))\n+  }\n+  it should \"return Left(_) if link is incorrect\" in {\n+    val incorrectURI = \"https://github.com/seleythen\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  it should \"return Left(CredentialsIncorrectException) if credentials are incorrect or insufficient\" in {\n+    val incorrectURI = \"https://github.com/seleythen/optics_generator_python\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  \"Get\" should \"return RemoteRepositoryAddress object when address is correct\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    val mockCredentials = new GitCredentials {"
      },
      {
        "author" : {
          "login" : "seleythen",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "This Credentials class is specific for using oauth2 with github. In future, if we would use normal username and password or ssh keys, this implementation would change. Mock should be more universal",
        "createdAt" : "2020-03-19T10:22:43Z",
        "updatedAt" : null,
        "commit" : "ddfd942df8471aa889cc44fe8aacc583404a59b6",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,46 @@\n+package common.git\n+\n+import common.git.RemoteRepositoryAddress._\n+import org.eclipse.jgit.transport.CredentialsProvider\n+import org.scalatest.flatspec.AnyFlatSpec\n+import org.scalatest.matchers.should.Matchers\n+\n+class RemoteRepositoryAddressTest extends AnyFlatSpec with Matchers {\n+  \"CorrectGitURI\" should \"return Right if correct URI applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, None))\n+  }\n+  it should \"return Right if correct URI and branch applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, Some(\"master\")))\n+  }\n+  it should \"return Left(_) if link is incorrect\" in {\n+    val incorrectURI = \"https://github.com/seleythen\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  it should \"return Left(CredentialsIncorrectException) if credentials are incorrect or insufficient\" in {\n+    val incorrectURI = \"https://github.com/seleythen/optics_generator_python\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  \"Get\" should \"return RemoteRepositoryAddress object when address is correct\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    val mockCredentials = new GitCredentials {"
      },
      {
        "author" : {
          "login" : "pkukielka",
          "name" : null,
          "avatarUrl" : null,
          "url" : null
        },
        "body" : "I would say YAGNI. And if we will need it later we can always add it/refactor existing code.\r\nAdding separate code for mocks, factories, etc. just complicates existing code base without proof if will be useful in future (unless we know for sure it will be needed in subsequent PRs).\r\n",
        "createdAt" : "2020-03-19T18:03:41Z",
        "updatedAt" : null,
        "commit" : "ddfd942df8471aa889cc44fe8aacc583404a59b6",
        "line" : null,
        "diffHunk" : "@@ -0,0 +1,46 @@\n+package common.git\n+\n+import common.git.RemoteRepositoryAddress._\n+import org.eclipse.jgit.transport.CredentialsProvider\n+import org.scalatest.flatspec.AnyFlatSpec\n+import org.scalatest.matchers.should.Matchers\n+\n+class RemoteRepositoryAddressTest extends AnyFlatSpec with Matchers {\n+  \"CorrectGitURI\" should \"return Right if correct URI applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, None))\n+  }\n+  it should \"return Right if correct URI and branch applied\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    assert(Right(true) == correctGitRepository(correctURI, Some(\"master\")))\n+  }\n+  it should \"return Left(_) if link is incorrect\" in {\n+    val incorrectURI = \"https://github.com/seleythen\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  it should \"return Left(CredentialsIncorrectException) if credentials are incorrect or insufficient\" in {\n+    val incorrectURI = \"https://github.com/seleythen/optics_generator_python\"\n+    correctGitRepository(incorrectURI, None) shouldBe a [Left[_, _]]\n+  }\n+\n+  \"Get\" should \"return RemoteRepositoryAddress object when address is correct\" in {\n+    val correctURI = \"https://github.com/seleythen/test_codetale\"\n+    val mockCredentials = new GitCredentials {"
      }
    ]
  }
]